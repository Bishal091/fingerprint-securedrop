---
# Only install postgres server packages if the database is local.
# In the case of a remote database, no postgres packages are required.
- name: Install PostgreSQL.
  become: true
  apt:
    name: "{{ fpsd_database_apt_packages }}"
    state: latest
    update_cache: yes
    cache_valid_time: 86400

- name: Make sure the cluster is running.
  become: true
  service: 
    name: postgresql
    enabled: yes 
    state: started

- block:
  - name: Record present roles.
    command: psql -c "SELECT rolname FROM pg_roles;"
    register: postgres_roles
    always_run: true
    changed_when: false

  - name: Create PostgreSQL user with user-defined password.
    postgresql_user:
      name: "{{ fpsd_database_psql_env.PGUSER }}"
      password: "{{ fpsd_database_password }}"
    when: "'{{ fpsd_database_psql_env.PGHOST }}' not in postgres_roles.stdout and fpsd_database_password"

  - name: Create PostgreSQL user with a randomnly-generated password.
    postgresql_user:
      name: "{{ fpsd_database_psql_env.PGUSER }}"
      # We don't include punctuation to avoid needing to escape ':' and '\' in the
      # PGPASSFILE
      password: "{{ lookup('password', '/tmp/passwordfile chars=ascii_letters,digits') }}"
    when: "'{{ fpsd_database_psql_env.PGHOST }}' not in postgres_roles.stdout and not fpsd_database_password"

  - name: Create the database.
    postgresql_db:
      name: "{{ fpsd_database_psql_env.PGDATABASE }}"
      owner: "{{ fpsd_database_psql_env.PGUSER }}"
      encoding: UTF-8
      lc_collate: en_US.UTF-8
      lc_ctype: en_US.UTF-8
      template: template0
    register: fpsd_database_result

  - name: Setup TABLEFUNC extension.
    postgresql_ext:
      name: tablefunc
      db: "{{ fpsd_database_psql_env.PGDATABASE }}"
    register: postgres_extension

  become: true
  become_user: postgres

# Configure raw schemas
- block:
  - name: List all schemas in the fpsd database.
    command: psql -c '\dn' fpsd
    register: schemas
    always_run: true
    changed_when: false

  - name: Create the raw, features, and models schemata.
    command: psql -c 'CREATE SCHEMA {{ item }};'
    when: "'{{ item }}' not in schemas.stdout"
    register: "schema_result"
    with_items:
      - raw
      - features
      - models

  - name: List all tables in the raw schema.
    command: psql -c '\dt raw.*'
    register: tables
    always_run: true
    changed_when: false

  - name: "Create the tables: crawls, hs_history, and frontpage_examples tables."
    command: psql -c '{{ lookup("file", "postgres-schemas/"+item) }}'
    with_items:
      - create_table_crawls.sql
      - create_table_hs_history.sql
      - create_table_frontpage_examples.sql
      - create_table_frontpage_traces.sql
    # Each file is of the form create_table_<table name>.sql, so let's extract the
    # expected table name and inspect the table list to check if it already exists.
    when: item|basename|regex_replace('^create_table_(.*)\\.sql$', '\\1') not in tables.stdout
    register: raw_schema_tables_result

  - name: List all tables in the models schema.
    command: psql -c '\dt models.*'
    register: models_tables
    always_run: true
    changed_when: false

  - name: "Create the tables: undefended_frontpage_folds and undefended_frontpage_attacks tables."
    command: psql -c '{{ lookup("file", "postgres-schemas/"+item) }}'
    with_items:
      - create_table_undefended_frontpage_attacks.sql
      - create_table_undefended_frontpage_folds.sql
    # Each file is of the form create_table_<table name>.sql, so let's extract the
    # expected table name and inspect the table list to check if it already exists.
    when: item|basename|regex_replace('^create_table_(.*)\\.sql$', '\\1') not in models_tables.stdout
    register: models_schema_tables_result

  environment: "{{ fpsd_database_psql_env }}"

# Configure test database
# Since the test database should contain no important data, we keep recreate it
# based on the "prod" database whenever changes are made to the "prod"
# database's schemas or tables.
- block:
  - name: Delete the test database based on outdated version of fpsd.
    postgresql_db:
      name: "test{{ fpsd_database_psql_env.PGDATABASE }}"
      state: absent
    # If the fpsd database was just created, the test database should
    # not exist, so there will be nothing to delete.
    when: not fpsd_database_result|changed

  - name: Create the test database based on fpsd.
    postgresql_db:
      name: "test{{ fpsd_database_psql_env.PGDATABASE }}"
      owner: "{{ fpsd_database_psql_env.PGUSER }}"
      encoding: UTF-8
      lc_collate: en_US.UTF-8
      lc_ctype: en_US.UTF-8
      template: "{{ fpsd_database_psql_env.PGDATABASE }}"

  when: "postgres_extension|changed 
    or False in raw_schema_tables_result.results|map(attribute='skipped')|list
    or False in models_schema_tables_result.results|map(attribute='skipped')|list
    or False in schema_result.results|map(attribute='skipped')|list"
  become: true
  become_user: postgres
