---
# Username to configure postgres access for.
fpsd_database_username: "{{ ansible_user|default(lookup('env', 'USER')) }}"

fpsd_database_apt_packages:
  - postgresql
  - libpq-dev
  - python-psycopg2

# All of these vars except password will be set as environment variables in
# `/etc/bash.bashrc`. If password is not set, then Ansible will generate one for
# you at provision-time. The password will not be set as an environment
# variable, but is instead saved to a PGPASSFILE, `~{{ ssh_username }}/.pgpass`,
# along with the corresponding information from the other vars according to the
# PGPASSFILE spec.
#
# Note: the database role will not overwrite an existing PGPASSFILE, so in order
# to do so, you'll have to first remove it then re-run the role:
# `ANSIBLE_ARGS="--tags=database vagrant provision"`.
fpsd_database_psql_env:
  PGHOST: localhost
  PGUSER: fp_user
  PGPORT: "5432"
  PGDATABASE: fpsd
  PGPASSFILE: "{{ ansible_env.HOME }}/.pgpass"

# If left undefined, a randomly generated password will be created and written
# to /tmp on the Ansible controller.
fpsd_database_password: ''

fpsd_database_raw_schema_tables:
  - create_table_crawls.sql
  - create_table_hs_history.sql
  - create_table_frontpage_examples.sql
  - create_table_frontpage_traces.sql

# Defaults to true. Set to false if you want to use a remote database. If you
# wish not to use the database at all, set the environment variable
# `ANSIBLE_ARGS="--skip-tags=database"`. If set to false you must fill out all
# vars in the field below so Ansible can still set the appropriate environment
# variables and create the PGPASSFILE for it just worksâ„¢ access to your remote
# database.
fpsd_database_initialize_local_db: true
