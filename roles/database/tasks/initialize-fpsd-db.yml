---
- name: Record present roles.
  become: true
  become_user: postgres
  command: psql -c "SELECT rolname FROM pg_roles;"
  register: postgres_roles

- name: Create fp_user PostgreSQL user.
  become: true
  become_user: postgres
  postgresql_user:
    name: fp_user
    # We don't include punctuation to avoid needing to escape ':' and '\' in the
    # PGPASSFILE
    password: "{{ lookup('password', '/tmp/passwordfile chars=ascii_letters,digits') }}"
  when: "'fp_user' not in postgres_roles.stdout"

- name: Test if a PostgreSQL password file is present.
  stat:
    path: "~{{ ansible_ssh_user }}/.pgpass"
  register: password_file
  
- name: Create the PostgreSQL password file.
  template:
    src: pgpass_conf.j2
    dest: "~{{ ansible_ssh_user }}/.pgpass"
    mode: "0600"
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
  when: not password_file.stat.exists

- name: Create the fpsd database.
  become: true
  become_user: postgres
  postgresql_db:
    name: fpsd
    owner: fp_user
    encoding: UTF-8 
    lc_collate: en_US.UTF-8
    lc_ctype: en_US.UTF-8
    template: template0

- name: Set the database environment variables in `/etc/bash.bashrc`.
  become: true
  lineinfile:
    line: export {{ item[0] }}={{ item[1] }}
    dest: /etc/bash.bashrc
    mode: "0644"
    owner: root
    group: root
  with_items: "{{ psql_env.items() }}"
